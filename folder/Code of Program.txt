using System; 
using System.Drawing;
    					
    
	public class Program
    {


    	const string white = "‚¨ú"; // 0,3
	    const string black = "‚¨õ"; // 1,2
		const string red = "üü•";   // 4
		
		static int[] gm = new int[7] {87, 229, 146, 149, 238, 102, 21};//–≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –º–Ω–æ–≥–æ—á–ª–µ–Ω
		static int[] tab7 = new int[256] {1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76, 152, 45, 90, 180, 117, 234, 
									   201, 143, 3, 6, 12, 24, 48, 96, 192, 157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 
									   193, 159, 35, 70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111, 222, 161, 95, 190, 97, 
									   194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60, 120, 240, 253, 231, 211, 187, 107, 214, 177, 127,
									   254, 225, 223, 163, 91, 182, 113, 226, 217, 175, 67, 134, 17, 34, 68, 136, 13, 26, 52, 104, 208,
									   189, 103, 206, 129, 31, 62, 124, 248, 237, 199, 147, 59, 118, 236, 197, 151, 51, 102, 204, 133, 
									   23, 46, 92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77, 154, 41, 82, 164, 85, 
									   170, 73, 146, 57, 114, 228, 213, 183, 115, 230, 209, 191, 99, 198, 145, 63, 126, 252, 229, 215, 
									   179, 123, 246, 241, 255, 227, 219, 171, 75, 150, 49, 98, 196, 149, 55, 110, 220, 165, 87, 174, 65, 
									   130, 25, 50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167, 83, 166, 81, 162, 89, 178, 121, 242, 
									   249, 239, 195, 155, 43, 86, 172, 69, 138, 9, 18, 36, 72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 
									   203, 139, 11, 22, 44, 88, 176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71, 142, 1};
		
		static int[] tab8 = new int[256] {0, 0, 1, 25, 2, 50, 26, 198, 3, 223, 51, 238, 27, 104, 199, 75, 4, 100, 224, 14, 52, 141, 239, 
									   129, 28, 193, 105, 248, 200, 8, 76, 113, 5, 138, 101, 47, 225, 36, 15, 33, 53, 147, 142, 218, 240, 
									   18, 130, 69, 29, 181, 194, 125, 106, 39, 249, 185, 201, 154, 9, 120, 77, 228, 114, 166, 6, 191, 139, 
									   98, 102, 221, 48, 253, 226, 152, 37, 179, 16, 145, 34, 136, 54, 208, 148, 206, 143, 150, 219, 189, 
									   241, 210, 19, 92, 131, 56, 70, 64, 30, 66, 182, 163, 195, 72, 126, 110, 107, 58, 40, 84, 250, 133, 
									   186, 61, 202, 94, 155, 159, 10, 21, 121, 43, 78, 212, 229, 172, 115, 243, 167, 87, 7, 112, 192, 247, 
									   140, 128, 99, 13, 103, 74, 222, 237, 49, 197, 254, 24, 227, 165, 153, 119, 38, 184, 180, 124, 17, 68, 
									   146, 217, 35, 32, 137, 46, 55, 63, 209, 91, 149, 188, 207, 205, 144, 135, 151, 178, 220, 252, 190, 97, 
									   242, 86, 211, 171, 20, 42, 93, 158, 132, 60, 57, 83, 71, 109, 65, 162, 31, 45, 67, 216, 183, 123, 164, 
									   118, 196, 23, 73, 236, 127, 12, 111, 246, 108, 161, 59, 82, 41, 157, 85, 170, 251, 96, 134, 177, 187, 204, 
									   62, 90, 203, 89, 95, 176, 156, 169, 160, 81, 11, 245, 22, 235, 122, 117, 44, 215, 79, 174, 213, 233, 230, 231, 
									   173, 232, 116, 214, 244, 234, 168, 80, 88, 175, };
		
	    public static void FillMatrixFromString(string n) 
    	{
    		//–ø–µ—Ä–≤–∞—è —Ñ–∞–∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ 
    		int c = 0;
    		int i = 20;
    		int j = 20;
    		int[,] m = new int[21,21];
    		FillingConstantvalues(m);
    		for(int x = 0;x<7;x++)
    		{
    			if (x%2 == 0)
    			{
    				while (i >= 0)
    				{
    					if ((m[i,j] != 2) & (m[i,j] != 3))
    					{
    						if(m[i,j] == 4)
    						{	
    							switch (n[c])
    							{
    								case '0': m[i,j] = 1; break;
    								case '1': m[i,j] = 0; break;
    							}
    							c++;
    						}	
    						else
    						{
    							switch (n[c])
    							{
    								case '0': m[i,j] = 0; break;
    								case '1': m[i,j] = 1; break;
    							}
    							c++;
    						}
    					}	
    					j--;
    					if ((m[i,j] != 2) & (m[i,j] != 3))
    					{
    						if(m[i,j] == 4)
    						{
    							switch (n[c])
    							{
    								case '0': m[i,j] = 1; break;
    								case '1': m[i,j] = 0; break;
    							}
    							c++;
    						}	
    						else
    						{
    							switch (n[c])
    							{
    								case '0': m[i,j] = 0; break;
    								case '1': m[i,j] = 1; break;
    							}
    							c++;
    						}
    					}	
    					j++;
    					i--;
    				}
    			i++;
    			j = j-2;
    			}
    			else
    			{
    				while (i <= 20)
    				{
    					if ((m[i,j] != 2) & (m[i,j] != 3))
    					{
    						if(m[i,j] == 4)
    						{	
    							switch (n[c])
    							{
    								case '0': m[i,j] = 1; break;
    								case '1': m[i,j] = 0; break;
    							}
    							c++;
    						}	
    						else
    						{
    							switch (n[c])
    							{
    								case '0': m[i,j] = 0; break;
    								case '1': m[i,j] = 1; break;
    							}
    							c++;
    						}
    					}	
    					j--;
    					if ((m[i,j] != 2) & (m[i,j] != 3))
    					{
    						if(m[i,j] == 4)
    						{
    							switch (n[c])
    							{
    								case '0': m[i,j] = 1; break;
    								case '1': m[i,j] = 0; break;
    							}
    							c++;
    						}	
    						else
    						{
    							switch (n[c])
    							{
    								case '0': m[i,j] = 0; break;
    								case '1': m[i,j] = 1; break;
    							}
    							c++;
    						}
    					}	
    					j++;
    					i++;
    				}
    			i--;
    			j = j-2;
    			}
    		}
    		
    		//–≤—Ç–æ—Ä–∞—è —Ñ–∞–∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    		i = 9;
    		j = 5;
    		for(int x = 1;x<4;x++)
    		{	
    			if (x%2!=0)
    			{	
    			   while (i <= 12)
    				{
    					if(m[i,j] == 4)
    					{	
    						switch (n[c])
    						{
    							case '0': m[i,j] = 1; break;
    							case '1': m[i,j] = 0; break;
    						}
    						c++;
    					}	
    					else
    					{
    						switch (n[c])
    						{
    							case '0': m[i,j] = 0; break;
    							case '1': m[i,j] = 1; break;
    						}
    						c++;
    					}
    					j--;
    					if(m[i,j] == 4)
    					{	
    						switch (n[c])
    						{
    							case '0': m[i,j] = 1; break;
    							case '1': m[i,j] = 0; break;
    						}
    						c++;
    					}	
    					else
    					{
    					switch (n[c])
    						{
    							case '0': m[i,j] = 0; break;
    							case '1': m[i,j] = 1; break;
    						}
    						c++;
    					}
    					j++;
    					i++;	
    				}
    				i--;
    				j=j-2;
    			}
    			else
    			{
    				while (i >= 9)
    				{
    					if(m[i,j] == 4)
    					{	
    						switch (n[c])
    						{
    							case '0': m[i,j] = 1; break;
    							case '1': m[i,j] = 0; break;
    						}
    						c++;
    					}	
    					else
    					{
    						switch (n[c])
    						{
    							case '0': m[i,j] = 0; break;
    							case '1': m[i,j] = 1; break;
    						}
    						c++;
    					}
    					j--;
    					if(m[i,j] == 4)
    					{	
    						switch (n[c])
    						{
    							case '0': m[i,j] = 1; break;
    							case '1': m[i,j] = 0; break;
    						}
    						c++;
    					}	
    					else
    					{
    						switch (n[c])
    						{
    							case '0': m[i,j] = 0; break;
    							case '1': m[i,j] = 1; break;
    						}
    						c++;
    					}
    					j++;
    					i--;	
    				}
    				i++;
    				j=j-2;
    			}	
    		}
    		
			LogMatrix(m);
            
            //—Å–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–æ–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QR-–∫–æ–¥–∞

            Bitmap bitmap = new Bitmap(800, 800, System.Drawing.Imaging.PixelFormat.Format32bppPArgb);
            Graphics graphics = Graphics.FromImage(bitmap);
            SolidBrush whitebrush = new SolidBrush(Color.White);
            SolidBrush blackbrush = new SolidBrush(Color.Black);
            
            int size = 30;
            int x1 = 85;
            int y1 = 85;
            
            int h = 0;
            int k = 0;
            graphics.FillRectangle(whitebrush, 0, 0, 800, 800);
            for(k = 0;k<21;k++)   
            {
                x1 = 85;
                y1 = 85+size*k;
                for(h = 0;h<21;h++)
                {
                    switch (m[k,h])
                    {
                        case 0: graphics.FillRectangle(whitebrush, x1, y1, size, size); break;
                        case 3: graphics.FillRectangle(whitebrush, x1, y1, size, size); break;
                        case 1: graphics.FillRectangle(blackbrush, x1, y1, size, size); break;
                        case 2: graphics.FillRectangle(blackbrush, x1, y1, size, size); break;
                    }
                    x1 = x1+size;
                    
                    
                }
                x1 = 85;
                y1 = 85+size*k;
            }   
            bitmap.Save(@"QR-code.png");
    	}
		public static void FillingConstantvalues(int[,] m) //–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
		{
			//–∑–∞–ø–æ–ª—è–Ω–µ–º –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–µ —á–µ—Ä–Ω—ã–µ
			for(int i = 0;i<7;i++)
			{
				m[0,i] = 2;     // m[—Å—Ç—Ä–æ–∫–∞,—Å—Ç–æ–ª–±–µ—Ü]
				m[6,i] = 2;     // 1 - —á–µ—Ä–Ω—ã–π, 2 - –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–π —á–µ—Ä–Ω—ã–π, 3 - –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–π –±–µ–ª—ã–π (–æ—Ä–∞–Ω–∂–µ–≤—ã–π –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏), 4 - –º–∞—Å–∫–∞ QR-–∫–æ–¥–∞ (–ø—É—Å—Ç—å –±—É–¥–µ—Ç –∫—Ä–∞—Å–Ω—ã–º)
				m[6,i] = 2;
				m[14,i] = 2;
				m[20,i] = 2;
				m[i,0] = 2;
				m[i,6] = 2;
				m[i,14] = 2;
				m[i,20] = 2;
				m[0,i+14] = 2;
				m[6,i+14] = 2;
				m[14+i,0] = 2;
				m[14+i,6] = 2;
			}
			for (int i = 0;i<3;i++)
			{
				m[2,2+i] = 2;
				m[3,2+i] = 2;
				m[4,2+i] = 2;
				m[8,6+i] = 2;
			}
			for (int i = 0;i<3;i++)
			{
				m[2,16+i] = 2;
				m[3,16+i] = 2;
				m[4,16+i] = 2;
				
			}
			for (int i = 0;i<3;i++)
			{
				m[16,2+i] = 2;
				m[17,2+i] = 2;
				m[18,2+i] = 2;
			}
	        for(int i = 0;i<5;i++)
			{
				m[8,i] = 2;
				m[16+i,8] = 2;
			}
			for(int i = 0;i<5;i++)
			{
				m[8,i] = 2;
				m[16+i,8] = 2;
			}
			for(int i = 0;i<2;i++)
			{
				m[i+5,8] = 2;
				m[i+13,8] = 2;
			}
			m[1,8] = 2;
			m[3,8] = 2;
			m[10,6] = 2;
			m[12,6] = 2;
			m[6,10] = 2;
			m[6,12] = 2;
			m[8,13] = 2;
			m[8,15] = 2;
			m[8,17] = 2;
			m[8,19] = 2;
			
			//–∑–∞–ø–æ–ª—è–Ω–µ–º –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–µ –±–µ–ª—ã–µ 
			for(int i = 0;i<8;i++)
			{
				m[i,7] = 3;
				m[i,13] = 3;
				m[13+i,7] =3;
				m[7,i] = 3;
				m[7,13+i] = 3;
				m[13,i] = 3;
			}	
			for(int i = 0;i<5;i++)
			{
				m[1,i+1] = 3;
				m[5,i+1] = 3;
				m[i+1,1] = 3;
				m[i+1,5] = 3;
				m[1,i+15] = 3;
				m[5,i+15] = 3;	
				m[i+1,15] = 3;
				m[i+1,19] = 3;
				m[15,i+1] = 3;
				m[19,i+1] = 3;
				m[i+15,1] = 3;
				m[i+15,5] = 3;
			}
			m[0,8]=3;
			m[2,8]=3;
			m[4,8]=3;
			m[7,8]=3;
			m[15,8]=3;
			m[8,5]=3;
			m[9,6]=3;
			m[11,6]=3;
			m[8,14]=3;
			m[8,16]=3;
			m[8,18]=3;
			m[8,20]=3;
			m[6,9]=3;
			m[6,11]=3;
			
			//–∑–∞–ø–æ–ª—è–Ω–µ–º "–∫—Ä–∞—Å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏" –¥–ª—è –º–∞—Å–∫–∏
			for (int i = 0;i<4;i++)
			{
				m[i+9,0] = 4;
				m[i+9,3] = 4;
			}	
			for (int i = 0;i<6;i++)
			{
				m[i,9] = 4;
				m[i,12] = 4;
			}	
			for (int i = 0;i<14;i++)
			{
				m[i+7,9] = 4;
				m[i+7,12] = 4;
			}	
			for (int i = 0;i<12;i++)
			{
				m[i+9,15] = 4;
				m[i+9,18] = 4;
			}	
		}
		
		
		public static void WriteColor(int c) 
		{
			if (c == 0)
			{
				Console.Write(white);
		    } 
			else 
			{
			    if ((c == 1) || (c == 2))
				{
					Console.Write(black);
				}	
				else 
				{
					if ((c == 0))
					{
						Console.Write(white);
					}
					else
					{
						if (c == 3)
						{
							Console.Write(white);
						}
						else
						{
							Console.Write(red);
						}	
					}	
				}	
		    }
	    }
		
		public static void LogMatrix(int[,] matrix) //—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
		{
			int n = 21;
			for(int j=0;j<n;j++) 
			{
				for(int i=0;i<n;i++) 
				{
					WriteColor(matrix[j,i]);
				}
				Console.WriteLine();
			}			
	    }
		
		
		public static int[] IntArrayToCorrection (int[] mass)
		{
			for (int c =0;c<19;c++)
			{
				int[] corr = new int[7]; 
				int a,b;
				int[] v = new int[7];
				a = mass[0];
				for(int i = 0;i<mass.Length-1;i++)//–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ê –∏ —É–¥–∞–ª—è–µ–º. –°–¥–≤–∏–≥–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞ 1, –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∑–∞–ø–∏—Å–∞—Ç—å 0
				{
					mass[i]=mass[i+1];
				}
				mass[mass.Length-1]=0;

				if (a!=0)
				{
					b = tab8[a]; //–ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —á–∏—Å–ª—É –ê —á–∏—Å–ª–æ –≤ —Ç–∞–±–ª–∏—Ü–µ tab8, –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ë
					for(int i = 0;i<7;i++)
						{
							v[i] = gm[i]+b;
						}
					for(int i = 0;i<7;i++)//–ï—Å–ª–∏ –í –±–æ–ª—å—à–µ 254, –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ 255
					{
						if (v[i] > 254)
						{
							v[i] = v[i]%255;
						}
					}
					for(int i = 0;i<7;i++)//–ó–∞–º–µ–Ω–∞ –í –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tab7
					{
						v[i] = tab7[v[i]];
					}
					for(int i = 0;i<7;i++) 
					{
						mass[i] = mass[i] ^ v[i];
					}
				}
			}	
			return	mass;
		}
		
		public static int[] BinaryStringToIntArray  (string s)// —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–≤–æ–∏—á–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ–≤–æ–π –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
		{
    		string[] mass = new string[19];
			for(int i = 0;i<19;i++)
			{
				for(int j = 0;j<8;j++)
				{
					mass[i] = mass[i] + s[j+8*i];
				}
			}	
    		int[] mass2 = new int[19];
			for (int i =0;i<19;i++)
			{
				mass2[i] = Program.BinaryIntToInt(Convert.ToInt32(mass[i]));
			}
			return mass2;
		}	
		
		
		public static int BinaryIntToInt(int n) // —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∏—Å–µ–ª –∏–∑ –¥–≤–æ–∏—á–Ω–æ–π –°–° –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é
    	{
			int i = 0;
			double s=0;
			int j = Convert.ToString(n).Length;
			while (i<j)
			{
				s = s + n%10*Math.Pow(2,i);
				n = n/10;
				i = i+1;
			}
			return Convert.ToInt32(s);
    	}	
		
		public static string Eight(string s)// –º–∞–ª–µ–Ω—å–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –¥–æ–ø–æ–ª–Ω—è—é—â–∞—è –¥–µ—Å. —á–∏—Å–ª–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª—Å—è –±–∞–π—Ç
		{
			     while (s.Length!= 8) 
    			     {
    					string x ="0";
    					x = x + s;
    				    s = x;
    			     }
			    return(s);
		}
		
		public static int IntToBinaryInt(int c)// —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∏—Å–µ–ª –∏–∑ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –°–° –≤ –¥–≤–æ–∏—á–Ω—É—é
		{
    		int a = 0;
    	    int b = 1;
    		int d;
    		while (c > 0)
    		{
    			d = c%2;
    		    c = c/2;
    			a = a + d * b; 
    			b = b * 10;
    		}
		    return a;	
		}
		
		public static string CharToBinaryString(char ch)//–ø–µ—Ä–µ–≤–æ–¥ —Å–∏–º–≤–æ–ª–∞, –∞ —Ç–æ—á–Ω–µ–µ –µ–≥–æ –Ω–æ–º–µ—Ä, –≤ –±–∞–π—Ç 
    	{
            int c = (int)ch;
    		c = Program.IntToBinaryInt(c);
    		string s = Convert.ToString(c);
    		s = Program.Eight(s);
            return s;
        }
    	
    	
        
        public static string StringToBinaryString(string s)//–ø–µ—Ä–µ–≤–æ–¥ –≤–≤–µ–¥–µ–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –¥–≤–æ–∏—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
    	{
    	   string z ="";
    	   for(int i = 0;i<s.Length; i++) 
    	   {
    	      z = z+Program.CharToBinaryString(s[i]);
    	   }
    	   return z;
    	}

		public static void Main()
    	{	
  		 	string s ="";
			int i;
			do
			{ 
				Console.WriteLine("Enter the text you want to code");
    			s = Console.ReadLine();
				int a = Program.IntToBinaryInt(s.Length);
				s = Program.StringToBinaryString(s);//–¥–µ–ª–∞–µ–º –∏–∑ —Å—Ç—Ä–æ–∫–∏ –±–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–¥
				string x=Program.Eight(a.ToString());//–¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
				x = x + s;
    			s = x; 
    			x = "0100";
				x = x + s;
				s = x;
				Console.WriteLine();
				if (s.Length > 152) //–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª-–≤–æ –∑–∞–Ω–∏–º–∞–µ–º–æ–π –ø–∞–º—è—Ç–∏
				{
					Console.WriteLine("Exceeded allowed amount of memory");
				}
			}	
			while(s.Length > 152);
			while(s.Length%8!=0)//–¥–µ–ª–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫—Ä–∞—Ç–Ω–æ–π 8
			{
				s = s+"0";
			}	
			int y = 19 - s.Length/8;
			
			for( i = 0;i < y;i++)
			{
				if(i % 2==0)
				{
					s = s + "11101100";
				}	
				if(i % 2!=0)
				{
					s = s + "00010001";
				}	
			}
			
			int[] mass = Program.BinaryStringToIntArray(s);
			
			int[] mass2 = (int[])mass.Clone();
			
			mass2 = Program.IntArrayToCorrection(mass2);//—Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ –±–∞–π—Ç–∞–º–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
			
			for(i = 0;i<7;i++)
			{
				s = s + Eight(Convert.ToString(IntToBinaryInt(mass2[i])));//–ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
			}
			
			FillMatrixFromString(s);//–∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ c –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –µ–≥–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏,
									//–ø–æ—Å–ª–µ —á–µ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª —Å –∫–æ–Ω–µ—á–Ω—ã–º qr-–∫–æ–¥–æ–º
            
            Console.WriteLine("The task completed. Check the image in your folder");
		}
	}